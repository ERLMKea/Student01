package com.example.student01.controller;

import com.example.student01.model.Student;
import com.example.student01.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;

@RestController
public class StudentRestController {

    @Autowired
    StudentRepository studentRepository;

    @GetMapping("/students")
    public List<Student> students() {
        List<Student> lst = studentRepository.findAll();
        return lst;
    }

    @GetMapping("/studentx/{name}")
    public Student getstudentbynamex(@PathVariable String name) {
        return new Student(name);
    }

    @GetMapping("/student1/{name}")
    public Student getstudentbyname1(@PathVariable String name) {
        return studentRepository.findByName(name).orElse(new Student("Student " + name + " NOT FOUND"));
    }


    @GetMapping("student11/name")
    public Student getstudentbyname(@PathVariable String name) {
        return studentRepository.findByName(name).orElseThrow(() -> new RuntimeException());
        //return productService.findByCode(code).map(ResponseEntity::ok).orElseThrow(() -> NoContentException::new);
    }


    @GetMapping("student12/name")
    public ResponseEntity<Student> respgetstudentbyname(@PathVariable String name) {
        var obj = studentRepository.findByName(name).orElseThrow(() -> new RuntimeException());
        return new ResponseEntity<>(obj, HttpStatus.OK);

    }

    @GetMapping("students/name")
    public List<Student> getallstudentsbyname(@PathVariable String name) {
        return studentRepository.findAllByName(name);
    }


    @GetMapping("/addstudent")
    public List<Student> addstudent() {
        Student std = new Student();
        std.setBornDate(LocalDate.now());
        std.setBornTime(LocalTime.now());
        List<Student> lst = studentRepository.findAll();
        std.setName("Autogenerated size=" + lst.size());
        studentRepository.save(std);
        System.out.println("Student save =" + std.getName());
        lst = studentRepository.findAll();
        return lst;
    }

    @GetMapping("/count/{str}")
    public String countQuestion(@PathVariable String str) {
        var obj1 = str.chars().mapToObj(c -> (char) c);
        long obj = str.chars().mapToObj(c -> (char) c).filter(c -> c == 'v').count();
        //return Integer.toString(obj);
        return (""+obj);
    }

}
